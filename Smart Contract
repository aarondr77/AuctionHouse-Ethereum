pragma solidity ^0.4.0;

contract Escrow {
    uint highestBid;
    uint endPurchaseTime;
    address seller;
    address buyer;
    bool received = false;
    
    event GoodReceived (bool received);
    
    modifier checkSender (address _neededSender) {
        require (msg.sender == _neededSender);
        _;
    }
    
    function Escrow (uint _highestBid, address _seller, 
            address _buyer) payable {
        highestBid = _highestBid;
        seller = _seller;
        buyer = _buyer;
        endPurchaseTime = now + 1 weeks;
        
    }
    
    function confirmReceipt () checkSender (buyer) {
        received = true;
        GoodReceived(received);
    }
    
    function completeSale () {
        if (received == true) {
            buyer.transfer(highestBid / 2);
            seller.transfer(this.balance);
        } else if (now >= endPurchaseTime) {
            // if the good is not received, then all money is reverted to 
            // original owner
            buyer.transfer(highestBid); 
        }
    } 
}

// I have everyone bid twice their actuall bid price, that way, if your bid is 
// the highest, you have already put down a deposit. The buyer will receive his
// deposit (deposit = price) back when he receives the good. This will prevent him
// from receiving the good and claiming that he did not. 

contract Auction {
    
    uint numberOfAuctions = 1;
    mapping (uint => individualAuction) auctions;
    struct individualAuction {
        uint highestBid;
        address highestBidder;
        address seller;
        uint minimumBid;
        uint endAuctionTime;
        bool auctionEnded;
    }
    mapping (address => uint) refundableBids;
    
    event newBid (uint highestBid);
    event HighestBidIncreased(address bidder, uint amount);
    
    // modifier 
    modifier isOver (uint AuctionID) {
        require(now > auctions[AuctionID].endAuctionTime);
        _;
    }
    
    function Auction ();
    
    function createNewAuction (uint _auctionTime, uint _minimumBid ) returns (uint) {
        uint AuctionID = numberOfAuctions;
        numberOfAuctions = numberOfAuctions + 1;
        auctions[AuctionID]  = individualAuction ({
            endAuctionTime: now + _auctionTime,
            minimumBid: _minimumBid,
            auctionEnded: false,
            seller: msg.sender,
            highestBid: 0,
            highestBidder: msg.sender
            });
        return AuctionID;
    }
    
    function bid (uint AuctionID) payable isOver (AuctionID) {
        require (msg.value > auctions[AuctionID].highestBid && msg.value > 2 * auctions[AuctionID].minimumBid);
        HighestBidIncreased(msg.sender, msg.value);
        refundableBids[auctions[AuctionID].highestBidder] += auctions[AuctionID].highestBid;
        auctions[AuctionID].highestBid = msg.value;
        auctions[AuctionID].highestBidder = msg.sender;
    }
    
    function withdrawRefundableBid (uint AuctionID) {
        require (auctions[AuctionID].seller != msg.sender);
        uint refund = refundableBids[msg.sender];
        require (refund > 0);
        refundableBids[msg.sender] = 0;
        msg.sender.transfer(refund);
        
    }
    
    function endAuction (uint AuctionID) isOver(AuctionID) {
        require (auctions[AuctionID].auctionEnded == false);
        auctions[AuctionID].auctionEnded = true; 
        if (auctions[AuctionID].highestBid >= 2 * auctions[AuctionID].minimumBid) {
            // a valid purchase
            Escrow myPurchase = new Escrow (auctions[AuctionID].highestBid, 
                auctions[AuctionID].seller, auctions[AuctionID].highestBidder);
            myPurchase.transfer(auctions[AuctionID].highestBid);
        }
    }
}
